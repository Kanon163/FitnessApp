class FitnessApp {
    constructor(storageManager, uiManager) {
        this.storage = storageManager;
        this.ui = uiManager;
        this.state = {
            currentDate: new Date(),
            settings: this.storage.getSettings(),
            library: this.storage.getLibrary(),
            history: this.storage.getHistory(),
            deferredInstallPrompt: null
        };
        this.timers = {}; // To store rest timers
    }

    init() {
        document.addEventListener('DOMContentLoaded', () => {
            this.loadTodaysWorkout();
            this.attachEventListeners();
            this.setupPWAInstall();
        });
    }
    
    // --- 核心加载与渲染 ---
    loadWorkoutForDate(date) {
        this.state.currentDate = date;
        this.ui.mainContent.innerHTML = ''; // 清空主界面
        this.ui.renderDateHeader(this.state.currentDate);
        document.getElementById('unit-toggle-btn').textContent = this.state.settings.unit.toUpperCase();

        const dateKey = this.ui.getFormattedDate(this.state.currentDate);
        const workoutData = this.storage.getWorkoutByDate(dateKey);

        if (workoutData.actions && workoutData.actions.length > 0) {
            workoutData.actions.forEach(actionName => {
                const action = this.state.library.find(a => a.name === actionName);
                if (action) {
                    const setsToday = workoutData.log.filter(s => s.action === actionName);
                    const nextSetNumber = setsToday.length + 1;
                    const module = this.ui.renderActionModule(action, setsToday, nextSetNumber, this.state.settings.unit);
                    this.attachModuleEventListeners(module);
                    this.updateHistoryTips(module, action.name);
                }
            });
        }
    }

    loadTodaysWorkout() {
        this.loadWorkoutForDate(new Date());
    }

    // --- 事件监听 ---
    attachEventListeners() {
        document.getElementById('library-btn').addEventListener('click', () => this.showLibraryModal());
        document.getElementById('log-btn').addEventListener('click', () => this.showLogModal());
        document.getElementById('add-action-btn').addEventListener('click', () => this.showAddActionModal());
        document.getElementById('unit-toggle-btn').addEventListener('click', () => this.toggleUnits());
    }

    attachModuleEventListeners(module) {
        const actionName = module.dataset.actionName;

        // 确认按钮
        module.querySelector('.confirm-btn').addEventListener('click', (e) => {
            this.saveSet(module, actionName);
        });

        // 纵向展开
        module.querySelector('.expand-btn').addEventListener('click', (e) => {
            this.toggleVerticalExpand(module);
        });
        
        // 横向展开
        module.querySelector('.details-btn').addEventListener('click', () => {
            module.querySelector('.focus-row-wrapper').classList.add('details-visible');
        });
        
        // 详细数据返回
        module.querySelector('.back-btn').addEventListener('click', () => {
             module.querySelector('.focus-row-wrapper').classList.remove('details-visible');
        });
        
        // 全局重命名
        module.querySelector('.action-name').addEventListener('click', () => {
            this.initiateGlobalRename(actionName);
        });
        
        // 删除本组(未确认)
        module.querySelector('.delete-set-btn').addEventListener('click', () => {
            // Clears inputs in the details area
            module.querySelector('.weight-input').value = '';
            module.querySelector('.rpe-input').value = '';
            module.querySelector('.notes-input').value = '';
            module.querySelector('.reps-input').value = '';
            module.querySelector('.focus-row-wrapper').classList.remove('details-visible');
        });
        
        // 计时器 (简化版)
        module.querySelector('.timer-btn').addEventListener('click', (e) => this.handleTimer(e.currentTarget, actionName));
    }

    // --- 动作模块核心功能 ---
    saveSet(module, actionName) {
        const repsInput = module.querySelector('.reps-input');
        const reps = parseInt(repsInput.value, 10);
        if (!reps || reps <= 0) return;

        const weight = module.querySelector('.weight-input').value || null;
        const rpe = module.querySelector('.rpe-input').value || null;
        const notes = module.querySelector('.notes-input').value.trim() || null;

        const newSet = {
            id: Date.now(),
            action: actionName,
            reps: reps,
            weight: weight ? parseFloat(weight) : null,
            rpe: rpe ? parseInt(rpe, 10) : null,
            notes: notes,
            unit: this.state.settings.unit
        };

        const dateKey = this.ui.getFormattedDate(this.state.currentDate);
        const workoutData = this.storage.getWorkoutByDate(dateKey);
        workoutData.log.push(newSet);
        this.storage.saveWorkoutForDate(dateKey, workoutData);

        // --- 更新UI ---
        repsInput.value = '';
        module.querySelector('.weight-input').value = '';
        module.querySelector('.rpe-input').value = '';
        module.querySelector('.notes-input').value = '';
        module.querySelector('.focus-row-wrapper').classList.remove('details-visible');
        
        const setsToday = workoutData.log.filter(s => s.action === actionName);
        const nextSetNumber = setsToday.length + 1;
        
        module.querySelector('.set-counter').textContent = `第 ${nextSetNumber} 组`;
        
        const setList = module.querySelector('.today-set-list');
        const setItemHTML = this.ui.createSetItemHTML(newSet, setsToday.length, this.state.settings.unit);
        setList.insertAdjacentHTML('beforeend', setItemHTML);
        module.querySelector('.today-sets-header').classList.remove('hidden');

        // 视觉反馈
        const confirmBtn = module.querySelector('.confirm-btn');
        confirmBtn.style.backgroundColor = 'var(--success-color)';
        setTimeout(() => { confirmBtn.style.backgroundColor = '' }, 300);
        
        repsInput.focus();
    }
    
    toggleVerticalExpand(module) {
        const historyArea = module.querySelector('.history-area');
        const expandBtn = module.querySelector('.expand-btn');
        const isExpanded = historyArea.classList.toggle('expanded');
        expandBtn.setAttribute('aria-expanded', isExpanded);
        expandBtn.classList.toggle('expanded');
    }

    updateHistoryTips(module, actionName) {
        const bestTipEl = module.querySelector('.history-tip[data-type="best"]');
        const lastTipEl = module.querySelector('.history-tip[data-type="last"]');
        
        let bestSet = null;
        let lastSet = null;
        let lastDate = '';

        const sortedDates = Object.keys(this.state.history).sort().reverse();
        
        for (const dateKey of sortedDates) {
            const workout = this.state.history[dateKey];
            const setsForAction = workout.log.filter(s => s.action === actionName && s.weight && s.reps);
            
            if (setsForAction.length > 0) {
                 if (!lastSet) {
                    lastSet = setsForAction[setsForAction.length - 1]; // last set of the most recent day
                    lastDate = dateKey;
                 }
                 
                 for (const set of setsForAction) {
                    const volume = set.weight * set.reps;
                    if (!bestSet || volume > (bestSet.weight * bestSet.reps)) {
                        bestSet = set;
                    }
                 }
            }
        }
        
        if (bestSet) {
            bestTipEl.textContent = `历史最佳: ${bestSet.reps} 次 @ ${bestSet.weight} ${bestSet.unit}`;
        }
        if (lastSet) {
            lastTipEl.textContent = `上次训练 (${lastDate}): ${lastSet.reps} 次 @ ${lastSet.weight} ${lastSet.unit}`;
        }
    }
    
    // --- 动作库管理 ---
    showLibraryModal() {
        const library = this.storage.getLibrary();
        let content = `<div class="item-list">`;
        if (library.length === 0) {
            content += `<p>动作库为空，请添加新动作。</p>`;
        } else {
            content += library.map(action => `
                <div class="list-item" data-action-name="${action.name}">
                    <div class="item-info">
                        <div class="item-name">${action.name}</div>
                        <div class="item-tags">${action.tags.join(', ')}</div>
                    </div>
                    <div class="item-actions">
                        <button class="edit-action-btn">✏️</button>
                        <button class="delete-action-btn">🗑️</button>
                    </div>
                </div>
            `).join('');
        }
        content += `</div>`;
        
        const footer = `
            <input type="file" id="import-csv" accept=".csv" style="display:none;">
            <button id="import-btn" class="modal-button secondary-btn">导入CSV</button>
            <button id="export-btn" class="modal-button secondary-btn">导出CSV</button>
            <button id="add-new-action-btn" class="modal-button primary-btn">新增动作</button>
        `;

        this.ui.showModal('动作库管理', content, footer);
        this.attachLibraryModalListeners();
    }
    
    attachLibraryModalListeners() {
        // 新增
        document.getElementById('add-new-action-btn').addEventListener('click', () => this.showAddEditActionModal());
        
        // 编辑和删除
        document.querySelectorAll('.edit-action-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const actionName = e.target.closest('.list-item').dataset.actionName;
                const action = this.state.library.find(a => a.name === actionName);
                this.showAddEditActionModal(action);
            });
        });
        document.querySelectorAll('.delete-action-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const actionName = e.target.closest('.list-item').dataset.actionName;
                this.ui.showConfirm('删除动作', `确定要删除 "${actionName}" 吗？此操作不可撤销。`, () => {
                    this.deleteAction(actionName);
                });
            });
        });
        
        // 导入导出
        document.getElementById('export-btn').addEventListener('click', () => this.exportLibraryToCSV());
        document.getElementById('import-btn').addEventListener('click', () => document.getElementById('import-csv').click());
        document.getElementById('import-csv').addEventListener('change', (e) => this.importLibraryFromCSV(e));
    }
    
    showAddEditActionModal(action = null) {
        const isEditing = !!action;
        const title = isEditing ? '编辑动作' : '新增动作';
        const name = isEditing ? action.name : '';
        const tags = isEditing ? action.tags.join(', ') : '';
        
        const content = `
            <div class="form-group">
                <label for="action-name-input">动作名称</label>
                <input type="text" id="action-name-input" value="${name}" ${isEditing ? 'disabled' : ''}>
            </div>
             <div class="form-group">
                <label for="action-tags-input">标签 (用逗号分隔)</label>
                <input type="text" id="action-tags-input" value="${tags}">
            </div>
        `;
        const footer = `<button id="save-action-btn" class="modal-button primary-btn">保存</button>`;
        this.ui.showModal(title, content, footer);
        
        document.getElementById('save-action-btn').addEventListener('click', () => {
            const newName = document.getElementById('action-name-input').value.trim();
            const newTags = document.getElementById('action-tags-input').value.trim().split(',').map(t => t.trim()).filter(Boolean);
            
            if (!newName) {
                alert('动作名称不能为空！');
                return;
            }
            
            const newAction = { name: newName, tags: newTags };
            
            if (isEditing) {
                // 只更新标签
                const index = this.state.library.findIndex(a => a.name === action.name);
                this.state.library[index] = newAction;
            } else {
                 if (this.state.library.some(a => a.name.toLowerCase() === newName.toLowerCase())) {
                    alert('该动作已存在！');
                    return;
                }
                this.state.library.push(newAction);
            }
            
            this.storage.saveLibrary(this.state.library);
            this.showLibraryModal(); // Refresh the list
        });
    }

    deleteAction(actionName) {
        this.state.library = this.state.library.filter(a => a.name !== actionName);
        this.storage.saveLibrary(this.state.library);
        
        // Also remove from today's workout if present
        const dateKey = this.ui.getFormattedDate(this.state.currentDate);
        const workoutData = this.storage.getWorkoutByDate(dateKey);
        workoutData.actions = workoutData.actions.filter(name => name !== actionName);
        this.storage.saveWorkoutForDate(dateKey, workoutData);

        this.loadWorkoutForDate(this.state.currentDate); // Refresh main UI
        this.showLibraryModal(); // Refresh library UI
    }
    
    initiateGlobalRename(oldName) {
        this.ui.showPrompt('全局重命名', `为 "${oldName}" 输入新名称`, oldName, (newName) => {
            if (newName && newName !== oldName) {
                if (this.state.library.some(a => a.name.toLowerCase() === newName.toLowerCase())) {
                    alert('新名称已存在于动作库中！');
                    return;
                }

                this.ui.showConfirm(
                    '警告：不可撤销操作',
                    `确定要将所有记录中的 "${oldName}" 重命名为 "${newName}" 吗？这将修改全部历史数据。`,
                    () => this.executeGlobalRename(oldName, newName)
                );
            }
        });
    }

    executeGlobalRename(oldName, newName) {
        // 1. Update library
        const actionIndex = this.state.library.findIndex(a => a.name === oldName);
        if (actionIndex > -1) {
            this.state.library[actionIndex].name = newName;
        }
        this.storage.saveLibrary(this.state.library);

        // 2. Update history
        const history = this.state.history;
        for (const dateKey in history) {
            // Update actions array
            const actionIndexInDay = history[dateKey].actions.indexOf(oldName);
            if (actionIndexInDay > -1) {
                history[dateKey].actions[actionIndexInDay] = newName;
            }
            // Update each log entry
            history[dateKey].log.forEach(set => {
                if (set.action === oldName) {
                    set.action = newName;
                }
            });
        }
        this.storage.saveHistory(history);
        this.state.history = history; // Update local state

        // 3. Refresh UI
        this.loadWorkoutForDate(this.state.currentDate);
        alert('重命名成功！');
    }
    
    // --- CSV 导入/导出 ---
    exportLibraryToCSV() {
        const library = this.storage.getLibrary();
        if (library.length === 0) {
            alert('动作库为空！');
            return;
        }
        let csvContent = "data:text/csv;charset=utf-8,name,tags\n";
        library.forEach(action => {
            const row = `${action.name},"${action.tags.join(',')}"`;
            csvContent += row + "\n";
        });

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "fitness_action_library.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    importLibraryFromCSV(event) {
        const file = event.target.files[0];
        if (!file) return;

        this.ui.showConfirm('导入确认', '这将覆盖您当前的整个动作库，确定要继续吗？', () => {
            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const text = e.target.result;
                    const rows = text.split('\n').slice(1); // Skip header
                    const newLibrary = [];
                    rows.forEach(row => {
                        if (row.trim()) {
                            const columns = row.match(/(".*?"|[^",]+)(?=\s*,|\s*$)/g);
                            if (columns && columns.length >= 2) {
                                const name = columns[0].trim();
                                const tags = columns[1].replace(/"/g, '').split(',').map(t => t.trim()).filter(Boolean);
                                newLibrary.push({ name, tags });
                            }
                        }
                    });
                    this.state.library = newLibrary;
                    this.storage.saveLibrary(newLibrary);
                    this.showLibraryModal();
                    alert('导入成功！');
                } catch (error) {
                    alert('导入失败，请检查文件格式是否正确 (name,tags)');
                    console.error('CSV import error:', error);
                }
            };
            reader.readAsText(file);
        });
    }

    
    // --- 日志与历史 ---
    showLogModal() {
        const history = this.storage.getHistory();
        const sortedDates = Object.keys(history).sort().reverse();
        
        let content = `<div class="log-list">`;
        if (sortedDates.length === 0) {
            content += `<p>暂无训练日志。</p>`;
        } else {
            content += sortedDates.map(dateKey => `
                <label class="date-item" data-date-key="${dateKey}">
                    <input type="checkbox" class="date-checkbox">
                    <span>${dateKey} (${history[dateKey].actions.length}个动作)</span>
                </label>
            `).join('');
        }
        content += `</div>`;
        
        const footer = `<button id="export-log-btn" class="modal-button primary-btn">导出选中日志 (CSV)</button>`;
        this.ui.showModal('训练日志', content, footer);
        
        document.querySelectorAll('.date-item').forEach(item => {
            item.addEventListener('click', (e) => {
                // Prevent checkbox click from triggering navigation
                if (e.target.type === 'checkbox') return;
                
                const dateKey = e.currentTarget.dataset.dateKey;
                const [year, month, day] = dateKey.split('-').map(Number);
                // JS month is 0-indexed
                const selectedDate = new Date(year, month - 1, day);
                this.loadWorkoutForDate(selectedDate);
                this.ui.hideModal();
            });
        });
        
        document.getElementById('export-log-btn').addEventListener('click', () => this.exportSelectedLogsToCSV());
    }
    
    exportSelectedLogsToCSV() {
        const selectedDates = [];
        document.querySelectorAll('.date-checkbox:checked').forEach(cb => {
            selectedDates.push(cb.closest('.date-item').dataset.dateKey);
        });

        if (selectedDates.length === 0) {
            alert('请至少选择一个日期！');
            return;
        }

        const history = this.storage.getHistory();
        let csvContent = "data:text/csv;charset=utf-8,date,action,set,reps,weight,unit,rpe,notes\n";
        
        selectedDates.sort().forEach(dateKey => {
            const workout = history[dateKey];
            const actionSetCounters = {};
            workout.log.forEach(set => {
                if (actionSetCounters[set.action] === undefined) {
                    actionSetCounters[set.action] = 1;
                } else {
                    actionSetCounters[set.action]++;
                }
                const row = [
                    dateKey,
                    `"${set.action}"`,
                    actionSetCounters[set.action],
                    set.reps || '',
                    set.weight || '',
                    set.unit || '',
                    set.rpe || '',
                    `"${set.notes || ''}"`
                ].join(',');
                csvContent += row + "\n";
            });
        });

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", `fitness_log_${selectedDates.join('_')}.csv`);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
    
    // --- 添加今日动作 ---
    showAddActionModal() {
        const dateKey = this.ui.getFormattedDate(this.state.currentDate);
        const todaysActions = this.storage.getWorkoutByDate(dateKey).actions || [];
        const availableActions = this.state.library.filter(a => !todaysActions.includes(a.name));

        let content = `<div class="item-list">`;
        if (availableActions.length > 0) {
            content += availableActions.map(action => `
                <div class="list-item add-action-item" data-action-name="${action.name}" style="cursor:pointer;">
                    <div class="item-info">
                        <div class="item-name">${action.name}</div>
                        <div class="item-tags">${action.tags.join(', ')}</div>
                    </div>
                </div>
            `).join('');
        } else {
            content += `<p>所有库内动作都已添加，或动作库为空。</p>`;
        }
        content += `</div>`;
        
        this.ui.showModal('选择要添加的动作', content);
        
        document.querySelectorAll('.add-action-item').forEach(item => {
            item.addEventListener('click', (e) => {
                const actionName = e.currentTarget.dataset.actionName;
                this.addActionToToday(actionName);
                this.ui.hideModal();
            });
        });
    }
    
    addActionToToday(actionName) {
        const dateKey = this.ui.getFormattedDate(this.state.currentDate);
        const workoutData = this.storage.getWorkoutByDate(dateKey);
        
        if (!workoutData.actions) {
            workoutData.actions = [];
        }

        if (!workoutData.actions.includes(actionName)) {
            workoutData.actions.push(actionName);
            this.storage.saveWorkoutForDate(dateKey, workoutData);
            this.loadWorkoutForDate(this.state.currentDate); // Reload to show the new module
        }
    }
    
    // --- 设置 ---
    toggleUnits() {
        this.state.settings.unit = this.state.settings.unit === 'kg' ? 'lbs' : 'kg';
        this.storage.saveSettings(this.state.settings);
        this.loadWorkoutForDate(this.state.currentDate); // Reload to reflect unit changes
    }
    
    // --- 计时器 ---
    handleTimer(button, actionName) {
        if (this.timers[actionName] && this.timers[actionName].intervalId) {
            // Stop timer
            clearInterval(this.timers[actionName].intervalId);
            delete this.timers[actionName];
            button.textContent = '⏱';
            button.style.color = '';
        } else {
            // Start timer
            const startTime = Date.now();
            this.timers[actionName] = { startTime };
            
            this.timers[actionName].intervalId = setInterval(() => {
                const elapsed = Math.floor((Date.now() - startTime) / 1000);
                const minutes = String(Math.floor(elapsed / 60)).padStart(2, '0');
                const seconds = String(elapsed % 60).padStart(2, '0');
                button.textContent = `${minutes}:${seconds}`;
            }, 1000);
            
            button.style.color = 'var(--secondary-color)';
        }
    }

    // --- PWA 安装 ---
    setupPWAInstall() {
        const installBtn = document.getElementById('pwa-install-btn');
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            this.state.deferredInstallPrompt = e;
            installBtn.style.display = 'block';
        });

        installBtn.addEventListener('click', () => {
            installBtn.style.display = 'none';
            if (this.state.deferredInstallPrompt) {
                this.state.deferredInstallPrompt.prompt();
                this.state.deferredInstallPrompt.userChoice.then((choiceResult) => {
                    if (choiceResult.outcome === 'accepted') {
                        console.log('User accepted the A2HS prompt');
                    } else {
                        console.log('User dismissed the A2HS prompt');
                    }
                    this.state.deferredInstallPrompt = null;
                });
            }
        });

        window.addEventListener('appinstalled', () => {
            console.log('PWA was installed');
            installBtn.style.display = 'none';
        });
    }

}

// --- 应用启动 ---
const app = new FitnessApp(storage, ui);
app.init();